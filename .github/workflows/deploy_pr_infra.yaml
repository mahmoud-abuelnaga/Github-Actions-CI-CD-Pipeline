name: Deploy PR infrastructure

on:
    workflow_call:
        secrets:
            TF_API_TOKEN:
                description: Terraform API token
                required: true

            EC2_PUBLIC_KEY:
                description: Public key for EC2 instance
                required: true

        inputs:
            pr_number:
                type: number
                description: The number of the PR
                required: true

    workflow_dispatch:
        inputs:
            pr_number:
                type: number
                description: The number of the PR
                required: true

jobs:
    create_workspace_in_terraform_cloud:
        runs-on: ubuntu-latest
        outputs:
            workspace_id: ${{ steps.output_workspace_id.outputs.workspace_id }}

        steps:
            - name: Get an existing workspace id
              id: get_existing_workspace_id
              shell: bash
              run: |
                  res=$(curl --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
                              --header "Content-Type: application/vnd.api+json" \
                              "https://app.terraform.io/api/v2/organizations/${{ vars.TF_CLOUD_ORGANIZATION }}/workspaces" | jq '.data[] | "\(.attributes.name): \(.id)"')

                  workspace_id=$(echo $res | grep "pull-request-${{ inputs.pr_number }}" | cut -d '"' -f 2 | cut -d " " -f 2)
                  echo "workspace_id=$workspace_id" >> $GITHUB_OUTPUT

            - name: Create a new workspace
              id: create_new_workspace
              if: steps.get_existing_workspace_id.outputs.workspace_id == ''
              shell: bash
              run: |
                  res=$(curl --location --request POST 'https://app.terraform.io/api/v2/organizations/${{ vars.TF_CLOUD_ORGANIZATION }}/workspaces' \
                              --header 'Authorization: Bearer ${{ secrets.TF_API_TOKEN }}' \
                              --header 'Content-Type: application/vnd.api+json' \
                              --data-raw '{
                                  "data": {
                                      "type": "workspaces",
                                      "attributes": {
                                        "name": "pull-request-${{ inputs.pr_number }}",
                                        "description": "Workspace of pull request #${{ inputs.pr_number }}",
                                        "execution-mode": "remote"
                                      }
                                  }
                              }')

                  workspace_id=$(echo $res | jq .data.id | cut -d '"' -f 2)
                  echo "workspace_id=$workspace_id" >> $GITHUB_OUTPUT

            - name: Output workspace id
              id: output_workspace_id
              run: |
                  if [[ -n "${{ steps.get_existing_workspace_id.outputs.workspace_id }}" ]]; then
                      echo "workspace_id=${{ steps.get_existing_workspace_id.outputs.workspace_id }}" >> $GITHUB_OUTPUT
                  else
                      echo "workspace_id=${{ steps.create_new_workspace.outputs.workspace_id }}" >> $GITHUB_OUTPUT
                  fi

    create_or_update_infrastructure:
        runs-on: ubuntu-latest
        needs: create_workspace_in_terraform_cloud
        environment:
            name: pull_request

        env:
            TF_VAR_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
            TF_VAR_workspace_name: pull-request-${{ inputs.pr_number }}
            TF_VAR_key_name: github-actions-proj-pr-${{ inputs.pr_number }}-key
            TF_VAR_sg_name: github-actions-proj-pr-${{ inputs.pr_number }}-sg
            TF_VAR_sg_description: Github Actions Proj - Security group for PR \#${{ inputs.pr_number }}
            TF_VAR_instance_name: github-actions-proj-pr-${{ inputs.pr_number }}-instance

        defaults:
            run:
                working-directory: ./infra/pr_staging

        steps:
            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Setup terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

            - name: Terraform Init
              run: terraform init

            - name: Terraform validate
              run: terraform validate

            - name: Terraform plan
              id: plan
              run: terraform plan

            - name: Terraform apply
              run: terraform apply -auto-approve
