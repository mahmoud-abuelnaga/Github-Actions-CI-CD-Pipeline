name: Packer AMI CD

on:
    push:
        paths:
            - "infra/images/**"

        branches:
            - main

    workflow_dispatch:

defaults:
    run:
        working-directory: ./infra/images

jobs:
    packer_push_validate:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Set up Packer
              uses: hashicorp/setup-packer@main

            - name: Initialize Packer
              run: packer init .

            - name: Validate Packer template
              run: packer validate .

    packer_push_build:
        runs-on: ubuntu-latest
        needs: packer_push_validate
        environment:
            name: production

        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Get the old AMI ID
              id: get_old_ami_id
              run: |
                  OLD_AMI_ID=$(aws ec2 describe-images \
                                    --owners self \
                                    --filters "Name=name,Values=github-actions-ci-cd-pipeline-ami" \
                                    --query "Images[].ImageId" \
                                    --output text)

                  echo "old_ami_id=$OLD_AMI_ID" >> $GITHUB_OUTPUT

            - name: Get AMI Snapshots
              id: get_snapshots
              run: |
                  SNAPSHOTS=$(aws ec2 describe-images --image-ids ${{ steps.get_old_ami_id.outputs.old_ami_id }} --query 'Images[0].BlockDeviceMappings[?Ebs].Ebs.SnapshotId' --output text --region ${{ vars.AWS_DEFAULT_REGION }})
                  echo "snapshots=$SNAPSHOTS" >> $GITHUB_OUTPUT

            - name: Set up Packer
              uses: hashicorp/setup-packer@main

            - name: Initialize Packer
              run: packer init .

            - name: Build Packer template
              run: packer build -var-file=vars.pkvars.hcl .

            - name: Get resulting AMI ID
              id: get_ami_id
              run: |
                  AMI_ID=$(cat ami_id.txt)
                  echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

            - name: Delete old AMI
              if: steps.get_old_ami_id.outputs.old_ami_id != ''
              run: aws ec2 deregister-image --image-id ${{ steps.get_old_ami_id.outputs.old_ami_id }} --region ${{ vars.AWS_DEFAULT_REGION }}

            - name: Delete old AMI snapshots
              if: steps.get_old_ami_id.outputs.old_ami_id != ''
              run: |
                  echo "${{ steps.get_snapshots.outputs.snapshots }}"
                  for SNAPSHOT_ID in ${{ steps.get_snapshots.outputs.snapshots }}; do
                    if [[ -z $SNAPSHOT_ID || $SNAPSHOT_ID == 'None' ]]; then
                      continue
                    fi

                    aws ec2 delete-snapshot --snapshot-id $SNAPSHOT_ID --region ${{ vars.AWS_DEFAULT_REGION }}
                  done
