name: Deploy PR Code

on:
    workflow_dispatch:
        inputs:
            pr_number:
                type: number
                description: The number of the PR
                required: true

env:
    AWS_REGION: ${{ vars.AWS_DEFAULT_REGION }}

jobs:
    check_if_pr_is_open:
        runs-on: ubuntu-latest
        env:
            GH_TOKEN: ${{ github.token }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Get PR state
              id: get_pr_state
              run: |
                  pr_json=$(gh pr view ${{ inputs.pr_number }} --json state || true)
                  state=$(echo $pr_json | jq .state | cut -d '"' -f 2)
                  echo "state=$state" >> $GITHUB_OUTPUT

            - name: Fail the workflow if the PR isn't open
              run: |
                  if [[ "${{ steps.get_pr_state.outputs.state }}" != "OPEN" ]]; then
                      echo "PR is not open. Exiting..."
                      exit 1
                  fi

                  echo "PR is open. Continuing..."

    check_if_pr_infrastructure_exists:
        needs: check_if_pr_is_open
        runs-on: ubuntu-latest
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        outputs:
            instance_id: ${{ steps.get_instance_id.outputs.instance_id }}

        steps:
            - name: Get the instance id if it exits
              id: get_instance_id
              run: |
                  INSTANCE_ID=$(aws ec2 describe-instances \
                                      --filters "Name=tag:Name,Values=github-actions-proj-pr-${{ inputs.pr_number }}-instance" \
                                      --query "Reservations[*].Instances[*].InstanceId" \
                                      --output text)

                  echo "INSTANCE_ID: $INSTANCE_ID"

                  echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    deploy_pr_infrastructure:
        needs: check_if_pr_infrastructure_exists
        if: needs.check_if_pr_infrastructure_exists.outputs.instance_id == '' || needs.check_if_pr_infrastructure_exists.outputs.instance_id == 'None'

        uses: ./.github/workflows/deploy_pr_infra.yaml
        with:
            pr_number: ${{ inputs.pr_number }}
        secrets:
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    deploy_pr_code:
        needs:
            - deploy_pr_infrastructure
            - check_if_pr_is_open

        if: needs.deploy_pr_infrastructure.result == 'success' || needs.deploy_pr_infrastructure.result == 'skipped'
        runs-on: ubuntu-latest
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        environment:
            name: pull_request

        steps:
            - name: Get instance id
              id: get_instance_id
              run: |
                  INSTANCE_ID=$(aws ec2 describe-instances \
                                        --filters "Name=tag:Name,Values=github-actions-proj-pr-${{ inputs.pr_number }}-instance" \
                                        --query "Reservations[*].Instances[*].InstanceId" \
                                        --output text)

                  echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

            - name: Get instance public ip
              id: get_instance_public_ip
              run: |
                  PUBLIC_IP=$(aws ec2 describe-instances \
                                --instance-ids ${{ steps.get_instance_id.outputs.instance_id }} \
                                --query 'Reservations[0].Instances[0].PublicIpAddress' \
                                --output text)

                  echo "instance_public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

            - name: Get instance security group
              id: get_instance_security_group
              run: |
                  SG_ID=$(aws ec2 describe-instances \
                              --instance-ids ${{ steps.get_instance_id.outputs.instance_id }} \
                              --query "Reservations[*].Instances[*].SecurityGroups[*].GroupId" \
                              --output text)

                  echo "security_group_id=$SG_ID" >> $GITHUB_OUTPUT

            - name: Get runner public ip
              id: get_runner_public_ip
              run: |
                  PUBLIC_IP=$(curl -s https://api.ipify.org)
                  echo "runner_public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

            - name: Allow ssh on the security group of instance from the runner ip
              run: |
                  aws ec2 authorize-security-group-ingress \
                      --group-id ${{ steps.get_instance_security_group.outputs.security_group_id }} \
                      --ip-permissions \
                      "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${{ steps.get_runner_public_ip.outputs.runner_public_ip }}/32,Description='Allow ssh from runner'}]"

            - name: Deploy to instance
              uses: burnett01/rsync-deployments@7.1.0
              with:
                  switches: -azvr --delete
                  path: src/
                  remote_path: /opt/app/
                  remote_host: ${{ steps.get_instance_public_ip.outputs.instance_public_ip }}
                  remote_user: ${{ secrets.EC2_USER }}
                  remote_key: ${{ secrets.EC2_PRIVATE_KEY }}

            - name: Start or Restart the node server with pm2
              uses: appleboy/ssh-action@v1
              with:
                  host: ${{ steps.get_instance_public_ip.outputs.instance_public_ip }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_PRIVATE_KEY }}
                  script: |
                      cd /opt/app
                      npm ci --only=production
                      pm2 reload "node-server" --update-env || pm2 start /opt/app/bin/www --name "node-server" --update-env
                      sudo systemctl reload nginx

            - name: Disallow ssh on the security group of instance from the runner ip
              run: |
                  aws ec2 revoke-security-group-ingress \
                      --group-id ${{ steps.get_instance_security_group.outputs.security_group_id }} \
                      --protocol tcp \
                      --port 22 \
                      --cidr "${{ steps.get_runner_public_ip.outputs.runner_public_ip }}/32"
